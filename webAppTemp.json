{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "create Web application with rds mysql",
    "Parameters": {
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "VpcId",
            "Default": "vpc-d76c20b3"
        },
       "OperatorEMail": {
      "Description": "EMail address to notify if there are any scaling operations",
      "Type": "String",
      "Default": "fadih@perfectomobile.com",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "must be a valid email address."
       },
        "Subnets": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
            "Default": "subnet-ace13df6,subnet-7419a25b"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "devtools-key-pairs"
        },
        "DBName": {
            "Default": "myDatabase",
            "Description": "MySQL database name",
            "Type": "String",
            "MinLength": "1",
            "Default": "fadidb",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
        },
        "DBUser": {
            "NoEcho": "true",
            "Description": "Username for MySQL database access",
            "Type": "String",
            "Default": "fadi",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBPassword": {
            "NoEcho": "true",
            "Description": "Password for MySQL database access",
            "Type": "String",
            "Default": "fadihuss",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "DBAllocatedStorage": {
            "Default": "5",
            "Description": "The size of the database (Gb)",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "1024",
            "ConstraintDescription": "must be between 5 and 1024Gb."
        },
        "DBInstanceClass": {
            "Description": "The database instance type",
            "Type": "String",
            "Default": "db.t2.small",
            "AllowedValues": [
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large"
            ],
            "ConstraintDescription": "must select a valid database instance type."
        },
        "MultiAZDatabase": {
            "Default": "true",
            "Description": "Create a Multi-AZ MySQL Amazon RDS database instance",
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "must be either true or false."
        },
        "WebServerCapacity": {
            "Default": "2",
            "Description": "The initial number of WebServer instances",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "5",
            "ConstraintDescription": "must be between 1 and 5 EC2 instances."
        },
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {

            "t2.nano": {
                "Arch": "HVM64"
            },
            "t2.micro": {
                "Arch": "HVM64"
            },
            "t2.small": {
                "Arch": "HVM64"
            },
            "t2.medium": {
                "Arch": "HVM64"
            }

        },
        "AWSInstanceType2NATArch": {
            "t1.micro": {
                "Arch": "NATHVM64"
            },
            "t2.nano": {
                "Arch": "NATHVM64"
            },
            "t2.micro": {
                "Arch": "NATHVM64"
            },
            "t2.small": {
                "Arch": "NATHVM64"
            },
            "t2.medium": {
                "Arch": "NATHVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "HVM64": "ami-045f1b3f87ed83659",
                "HVMG2": "ami-045f1b3f87ed83659"
            }
        }
    },
    "Resources": {
        "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "OperatorEMail"
            },
            "Protocol": "email"
          }
        ]
      }
    },
        "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
        "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
        "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
        "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
        "myDNSRecord" : {
         "Type" : "AWS::Route53::RecordSet",
         "Properties" : {
            "HostedZoneName" :"aws-dev.perfectomobile.com.",
            "Comment" : "DNS name for my instance.",
            "Name" : {
               "Fn::Join" : [
                  "",
                  [
                     "mywebapp.",
                     {
                        "Ref" : "AWS::Region"
                     },
                     ".",
                     "aws-dev.perfectomobile.com."
                  ]
               ]
            },
            "Type" : "CNAME",
            "TTL" : "900",
            "ResourceRecords" : [
               {
                  "Fn::GetAtt" : [
                     "ApplicationLoadBalancer",
                     "DNSName"
                  ]
               }
            ]
         }
      },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Subnets": {
                    "Ref": "Subnets"
                },
                "Scheme" : "internal"
            }
        },
        "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "ALBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 10,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 5,
                "VpcId": {
                    "Ref": "VpcId"
                },
                "TargetGroupAttributes": [
                    {
                        "Key": "stickiness.enabled",
                        "Value": "false"
                    },
                    {
                        "Key": "stickiness.type",
                        "Value": "lb_cookie"
                    },
                    {
                        "Key": "stickiness.lb_cookie.duration_seconds",
                        "Value": "30"
                    }
                ]
            }
        },
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Ref": "Subnets"
                },
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "MinSize": "1",
                "MaxSize": "5",
                "DesiredCapacity": {
                    "Ref": "WebServerCapacity"
                },"Tags": [
                    {
                        "Key": "project",
                        "Value": "espresso",
                        "PropagateAtLaunch":"true"
                    },
                    {
                        "Key": "lifetime",
                        "Value": "-1",
                        "PropagateAtLaunch":"true"
                    }
                ],
                "TargetGroupARNs": [
                    {
                        "Ref": "ALBTargetGroup"
                    }
                ],
                "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "NotificationTopic"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT5M",
                    "Count": {
                        "Ref": "WebServerCapacity"
                    }
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "1",
                    "MaxBatchSize": "1",
                    "PauseTime": "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "Comment1": "Configure the bootstrap helpers to install the Apache Web Server and PHP",
                "Comment2": "The website content is downloaded from the CloudFormationPHPSample.zip file",
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "httpd": [],
                                "php": [],
                                "php-mysql": []
                            }
                        },
                        "files": {
                            "/var/www/html/index.php": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "<html>\n",
                                            "  <head>\n",
                                            "    <title>football</title>\n",
                                            "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
                                            "  </head>\n",
                                            "  <body>\n",
                                            "    <h1>rocky team</h1>\n",
                                            "    <p/>\n",
                                            "    <?php\n",
                                            "      // Print out the current data and tie\n",
                                            "      print \"The Current Date and Time is: <br/>\";\n",
                                            "      print date(\"g:i A l, F j Y.\");\n",
                                            "    ?>\n",
                                            "    <p/>\n",
                                            "    <?php\n",
                                            "      // Setup a handle for CURL\n",
                                            "      $curl_handle=curl_init();\n",
                                            "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
                                            "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
                                            "      // Get the hostname of the intance from the instance metadata\n",
                                            "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');\n",
                                            "      $hostname = curl_exec($curl_handle);\n",
                                            "      // Get the instance-id of the intance from the instance metadata\n",
                                            "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
                                            "      $instanceid = curl_exec($curl_handle);\n",
                                            "      if (empty($instanceid))\n",
                                            "      {\n",
                                            "        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
                                            "      }\n",
                                            "      else\n",
                                            "      {\n",
                                            "        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
                                            "      }\n",
                                            "      $Database   = \"",
                                            {
                                                "Fn::GetAtt": [
                                                    "MySQLDatabase",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            "\";\n",
                                            "      $DBUser     = \"",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            "\";\n",
                                            "      $DBPassword = \"",
                                            {
                                                "Ref": "DBPassword"
                                            },
                                            "\";\n",
                                            "      $DBName = \"",
                                            {
                                                "Ref": "DBName"
                                            },
                                            "\";\n",
                                            "      $conn = new mysqli($Database, $DBUser, $DBPassword, $DBName);\n",
                                            "      if ($conn->connect_error)\n",
                                            "      {\n",
                                            "        die(\"Connection failed: \" . $conn->connect_error);\n",
                                            "      }\n",
                                            "      $sql = \"SELECT id, firstname, lastname FROM players\";\n",
                                            "      $result = $conn->query($sql);\n",
                                            "      if ($result->num_rows > 0)\n",
                                            "      {\n",
                                            "        while($row = $result->fetch_assoc()) {\n",
                                            "      echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\"; \n",
                                            "      }\n",
                                            "      }\n",
                                            "      else\n",
                                            "      {\n",
                                            "        echo \"0 results\";\n",
                                            "      }\n",
                                            "      print (\"\n Connected to $Database successfully\");\n",
                                            "      mysql_close($dbconnection);\n",
                                            "    ?>\n",
                                            "  </body>\n",
                                            "</html>\n"
                                        ]
                                    ]
                                },
                                "mode": "000600",
                                "owner": "apache",
                                "group": "apache"
                            },
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/apitools/cfn-init/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource LaunchConfig ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                },
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/apitools/cfn-init/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource LaunchConfig ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/apitools/cfn-init/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource WebServerGroup ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-6.noarch.rpm",
                                 "\n",
                                "yum install puppet-agent -y",
                                "\n",
                                 "echo [main] > /etc/puppetlabs/puppet/puppet.conf",
                                "\n",
                                "echo server=puppet6.aws-prod.perfectomobile.com >> /etc/puppetlabs/puppet/puppet.conf",
                                "\n",
                                "echo environment=production >> /etc/puppetlabs/puppet/puppet.conf",
                                "\n",
                                 "instanceid=$(curl http://169.254.169.254/latest/meta-data/instance-id)",
                                "\n",
                                "echo certname=amazon.mywebapp.tlv.dev.$instanceid >> /etc/puppetlabs/puppet/puppet.conf",
                                "\n",
                                "echo http_proxy_host=proxium-us-east-1.aws-prod.perfectomobile.com >> /etc/puppetlabs/puppet/puppet.conf",
                                "\n",
                                "echo http_proxy_port=3128 >> /etc/puppetlabs/puppet/puppet.conf",
                                "\n",
                                "echo spaly=true >> /etc/puppetlabs/puppet/puppet.conf",
                                "\n",
                                "echo runinterval=10m >> /etc/puppetlabs/puppet/puppet.conf",
                                "\n",
                                "echo autoflush=true >> /etc/puppetlabs/puppet/puppet.conf",
                                "\n"



                            ]
                        ]
                    }
                }
            }
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80 locked down to the ELB and SSH access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol" : "-1",
                        "FromPort" : "0",
                        "ToPort" : "65535",
                        "CidrIp" : "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "DBEC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Open database for access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "myDBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "fadi",
                "SubnetIds": {"Ref": "Subnets"},
                "Tags": [
                    {
                        "Key": "fadi",
                        "Value": "huss"
                    }
                ]
            }

    },
        "MySQLDatabase": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "Engine": "MySQL",
                "DBName": {
                    "Ref": "DBName"
                },
                "MultiAZ": {
                    "Ref": "MultiAZDatabase"
                },
                "MasterUsername": {
                    "Ref": "DBUser"
                },
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "DBInstanceClass": {
                    "Ref": "DBInstanceClass"
                },
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "DBSubnetGroupName": {
                    "Ref": "myDBSubnetGroup"
                }
            }
        }
    },
    "Outputs": {
        "WebsiteURL": {
            "Description": "URL for newly created LAMP stack",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ApplicationLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            }
        },
        "PublicDNSRecord" : {
      "Value": { "Ref": "myDNSRecord" }
    },
     "db" : {
      "Value": { "Fn::GetAtt": [
                     "MySQLDatabase",
                     "Endpoint.Address"
       ] }
    }
    }
}
